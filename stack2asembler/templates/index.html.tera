<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>VM to Hack Assembler</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      min-height: 100vh;
      background: linear-gradient(-45deg, #667eea, #764ba2, #f093fb, #f5576c, #4facfe, #00f2fe);
      background-size: 400% 400%;
      animation: gradientShift 8s ease infinite;
      padding: 2rem;
      color: #333;
    }

    @keyframes gradientShift {
      0% { background-position: 0% 50%; }
      50% { background-position: 100% 50%; }
      100% { background-position: 0% 50%; }
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      background: rgba(255, 255, 255, 0.95);
      backdrop-filter: blur(10px);
      border-radius: 20px;
      box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
      overflow: hidden;
      animation: fadeIn 1s ease-out;
    }

    @keyframes fadeIn {
      from { opacity: 0; transform: translateY(30px); }
      to { opacity: 1; transform: translateY(0); }
    }

    .header {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      padding: 2rem;
      text-align: center;
      position: relative;
      overflow: hidden;
    }

    .header::before {
      content: '';
      position: absolute;
      top: -50%;
      left: -50%;
      width: 200%;
      height: 200%;
      background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
      animation: rotate 10s linear infinite;
    }

    @keyframes rotate {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .header h1 {
      font-size: 2.5rem;
      font-weight: 700;
      margin-bottom: 0.5rem;
      position: relative;
      z-index: 1;
    }

    .header p {
      font-size: 1.1rem;
      opacity: 0.9;
      position: relative;
      z-index: 1;
    }

    .content {
      padding: 2rem;
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }

    .section {
      background: rgba(255, 255, 255, 0.8);
      border-radius: 15px;
      padding: 1.5rem;
      box-shadow: 0 10px 20px rgba(0, 0, 0, 0.05);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

    .section:hover {
      transform: translateY(-5px);
      box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
    }

    .section h2 {
      color: #667eea;
      margin-bottom: 1rem;
      font-size: 1.5rem;
      font-weight: 600;
    }

    #inputBox {
      width: 100%;
      height: 200px;
      border: 2px solid #e0e0e0;
      border-radius: 10px;
      padding: 1rem;
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 14px;
      line-height: 1.5;
      resize: vertical;
      transition: border-color 0.3s ease, box-shadow 0.3s ease;
      background: linear-gradient(135deg, #f8f9ff 0%, #fff 100%);
    }

    #inputBox:focus {
      outline: none;
      border-color: #667eea;
      box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    #convertBtn {
      background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
      color: white;
      border: none;
      padding: 1rem 2rem;
      border-radius: 50px;
      font-size: 1.1rem;
      font-weight: 600;
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
      position: relative;
      overflow: hidden;
      margin-top: 1rem;
      width: 100%;
    }

    #convertBtn:hover {
      transform: translateY(-2px);
      box-shadow: 0 8px 20px rgba(102, 126, 234, 0.6);
    }

    #convertBtn:active {
      transform: translateY(0);
    }

    #convertBtn.loading {
      background: linear-gradient(135deg, #95a5a6 0%, #7f8c8d 100%);
      cursor: not-allowed;
    }

    #convertBtn.loading::after {
      content: '';
      position: absolute;
      top: 50%;
      left: 50%;
      width: 20px;
      height: 20px;
      margin: -10px 0 0 -10px;
      border: 2px solid transparent;
      border-top: 2px solid white;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    #output {
      width: 100%;
      height: 250px;
      background: linear-gradient(135deg, #2c3e50 0%, #34495e 100%);
      color: #2ecc71;
      padding: 1rem;
      border-radius: 10px;
      font-family: 'Consolas', 'Monaco', monospace;
      font-size: 14px;
      line-height: 1.5;
      white-space: pre-wrap;
      overflow-y: auto;
      border: 2px solid #34495e;
      box-shadow: inset 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    .status-message {
      color: #95a5a6;
      font-style: italic;
      text-align: center;
      margin-top: 2rem;
    }

    .error {
      color: #e74c3c !important;
      background: linear-gradient(135deg, #2c1810 0%, #3d1a1a 100%) !important;
    }

    .success {
      animation: successPulse 0.5s ease-in-out;
    }

    @keyframes successPulse {
      0% { transform: scale(1); }
      50% { transform: scale(1.02); }
      100% { transform: scale(1); }
    }

    @media (max-width: 768px) {
      .content {
        grid-template-columns: 1fr;
      }
      
      .header h1 {
        font-size: 2rem;
      }
      
      body {
        padding: 1rem;
      }
    }

    .floating-shapes {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: -1;
    }

    .shape {
      position: absolute;
      background: rgba(255, 255, 255, 0.1);
      border-radius: 50%;
      animation: float 6s ease-in-out infinite;
    }

    .shape:nth-child(1) {
      width: 80px;
      height: 80px;
      top: 20%;
      left: 10%;
      animation-delay: 0s;
    }

    .shape:nth-child(2) {
      width: 60px;
      height: 60px;
      top: 60%;
      right: 10%;
      animation-delay: 2s;
    }

    .shape:nth-child(3) {
      width: 40px;
      height: 40px;
      bottom: 20%;
      left: 20%;
      animation-delay: 4s;
    }

    @keyframes float {
      0%, 100% { transform: translateY(0px); }
      50% { transform: translateY(-20px); }
    }
  </style>
</head>
<body>
  <div class="floating-shapes">
    <div class="shape"></div>
    <div class="shape"></div>
    <div class="shape"></div>
  </div>

  <div class="container">
    <div class="header">
      <h1>VM to Hack Assembler</h1>
      <p>Convert your VM code to Hack Assembly language</p>
    </div>
    
    <div class="content">
      <div class="section">
        <h2>üìù VM Code Input</h2>
        <textarea id="inputBox" placeholder="// Enter your VM code here&#10;push constant 7&#10;push constant 8&#10;add">// Your VM code here
push constant 7
push constant 8
add</textarea>
        <button id="convertBtn" onclick="sendData()">
          <span id="btnText">üöÄ Convert to Hack Assembly</span>
        </button>
      </div>
      
      <div class="section">
        <h2>‚öôÔ∏è Hack Assembly Output</h2>
        <div id="output" class="status-message">Waiting for conversion...</div>
      </div>
    </div>
  </div>

  <script>
    async function sendData() {
      const inputText = document.getElementById("inputBox").value;
      const outputDiv = document.getElementById("output");
      const convertBtn = document.getElementById("convertBtn");
      const btnText = document.getElementById("btnText");
      
      // Reset classes
      outputDiv.classList.remove("error", "success");
      convertBtn.classList.add("loading");
      btnText.textContent = "Converting...";
      outputDiv.textContent = "üîÑ Converting your VM code...";
      
      try {
        const response = await fetch("/convert", {
          method: "POST",
          headers: {
            "Content-Type": "application/json"
          },
          body: JSON.stringify({ vm_code: inputText })
        });
        
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        
        const result = await response.json(); // Parse as JSON
        
        // Display the assembly code from the output_file field
        if (result.output_file) {
          outputDiv.textContent = result.output_file;
          outputDiv.classList.add("success");
          
          // Show success message briefly
          if (result.message) {
            setTimeout(() => {
              outputDiv.textContent = `// ${result.message}\n\n${result.output_file}`;
            }, 500);
          }
        } else {
          throw new Error("No assembly code received");
        }
        
      } catch (error) {
        outputDiv.textContent = `‚ùå Error: ${error.message}`;
        outputDiv.classList.add("error");
      } finally {
        convertBtn.classList.remove("loading");
        btnText.textContent = "üöÄ Convert to Hack Assembly";
      }
    }
    
    // Add some interactive effects
    document.getElementById("inputBox").addEventListener("input", function() {
      const outputDiv = document.getElementById("output");
      if (outputDiv.textContent === "Waiting for conversion...") {
        outputDiv.textContent = "Ready to convert! Click the button above.";
      }
    });
  </script>
</body>
</html>